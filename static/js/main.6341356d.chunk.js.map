{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","robots.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","cardsArray","map","user","i","key","Fragment","SearchBox","searchField","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDCHSC,EAbF,SAAC,GAAwB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,2DACb,wBAAIA,UAAU,MAAd,cACA,yBAAKA,UAAU,MACb,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAA+CI,IAAI,YAC3D,4BAAKJ,GACL,2BAAIC,MCSGI,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAKvB,OAAO,kBAAC,IAAMW,SAAP,KAAiBL,ICDXM,EAZG,SAAC,GAAoC,EAAjCC,YAAkC,IAArBC,EAAoB,EAApBA,aACjC,OACE,yBAAKb,UAAU,8BACb,2BAAOc,KAAK,SACVC,YAAY,gBACZf,UAAU,aACVgB,SAAWH,MCRNT,EAAS,CAClB,CACIP,GAAI,EACJC,KAAM,eACNmB,SAAU,eACVlB,MAAO,+BAEX,CACIF,GAAI,EACJC,KAAM,eACNmB,SAAU,cACVlB,MAAO,8BAEX,CACIF,GAAI,EACJC,KAAM,qBACNmB,SAAU,YACVlB,MAAO,+BAEX,CACIF,GAAI,EACJC,KAAM,mBACNmB,SAAU,aACVlB,MAAO,8BAEX,CACIF,GAAI,EACJC,KAAM,YACNmB,SAAU,UACVlB,MAAO,6BAEX,CACIF,GAAI,EACJC,KAAM,gBACNmB,SAAU,UACVlB,MAAO,+BAEX,CACIF,GAAI,EACJC,KAAM,iBACNmB,SAAU,WACVlB,MAAO,gCAEX,CACIF,GAAI,EACJC,KAAM,8BACNmB,SAAU,SACVlB,MAAO,+BAEX,CACIF,GAAI,EACJC,KAAM,SACNmB,SAAU,gBACVlB,MAAO,+BAEX,CACIF,GAAI,GACJC,KAAM,QACNmB,SAAU,UACVlB,MAAO,+BC5BAmB,E,kDAzBb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1C,EAAKC,MAAQ,CACXrB,OAAQA,EACRkB,YAAa,IAJH,E,qDAYJ,IAAD,OACDI,EAAiBC,KAAKF,MAAMrB,OAAOwB,QAAO,SAACxB,GAC/C,OAAOA,EAAON,KAAK+B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEnE,OACE,kBAAC,IAAMnB,SAAP,KACE,wBAAIV,UAAU,YAAd,eACA,kBAAC,EAAD,CAAWa,aAAcc,KAAKR,iBAC9B,kBAAC,EAAD,CAAUf,OAAQsB,S,GArBRK,aCIlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6341356d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"robot-card bg-light-green br3 pa3 ma2 bw2 shadow-5 grow\">\r\n      <h2 className=\"tc\">RoboFriend</h2>\r\n      <div className=\"tc\">\r\n        <img src={`https://robohash.org/${name}?size=200x200`} alt=\"profile\" />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card.js\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <React.Fragment>{cardsArray}</React.Fragment>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ( { searchField, searchChange } ) => {\r\n  return (\r\n    <div className=\"search-box-container w-100\">\r\n      <input type=\"search\" \r\n        placeholder=\"search robots\" \r\n        className=\"search-box\" \r\n        onChange={ searchChange }\r\n        />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","export const robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Marius Sulla',\r\n        username: 'RossumPossum',\r\n        email: 'marius@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Talos Rhodes',\r\n        username: 'Argonautica',\r\n        email: 'talos@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Hadaly l'Isle-Adam\",\r\n        username: 'FutureEve',\r\n        email: 'hadaly@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Maria Metropolis\",\r\n        username: 'MetroMaria',\r\n        email: 'maria@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"Adam Link\",\r\n        username: 'IRobot1',\r\n        email: 'adam@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"Robbie Asimov\",\r\n        username: 'IRobot2',\r\n        email: 'robbie@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"Richard Daniel\",\r\n        username: 'NotToday',\r\n        email: 'richard@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"Marvin the Paranoid Android\",\r\n        username: 'OhDear',\r\n        email: 'marvin@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: \"Bender\",\r\n        username: 'KillAllHumans',\r\n        email: 'bender@universalrobots.tech'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: \"Sonny\",\r\n        username: 'IRobot3',\r\n        email: 'sonny@universalrobots.tech'\r\n    }\r\n];","import React, { Component } from \"react\";\r\nimport CardList from \"./CardList.js\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { robots } from \"./robots\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: robots,\r\n      searchfield: ''\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robots) => {\r\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"tc w-100\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <CardList robots={filteredRobots} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport \"./card.css\";\nimport \"./App.css\";\nimport \"tachyons\";\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}